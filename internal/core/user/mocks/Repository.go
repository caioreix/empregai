// Code generated by mockery v2.20.0. DO NOT EDIT.

package usermock

import (
	context "context"
	user "go-api/internal/core/user"

	mock "github.com/stretchr/testify/mock"

	utils "go-api/pkg/utils"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, userID
func (_m *Repository) Delete(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) FindByEmail(ctx context.Context, email string) (*user.Model, error) {
	ret := _m.Called(ctx, email)

	var r0 *user.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*user.Model, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.Model); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetByID(ctx context.Context, userID uuid.UUID) (*user.Model, error) {
	ret := _m.Called(ctx, userID)

	var r0 *user.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*user.Model, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *user.Model); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, pq
func (_m *Repository) GetUsers(ctx context.Context, pq *utils.PaginationQuery) (*user.List, error) {
	ret := _m.Called(ctx, pq)

	var r0 *user.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *utils.PaginationQuery) (*user.List, error)); ok {
		return rf(ctx, pq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *utils.PaginationQuery) *user.List); ok {
		r0 = rf(ctx, pq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *utils.PaginationQuery) error); ok {
		r1 = rf(ctx, pq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, _a1
func (_m *Repository) Register(ctx context.Context, _a1 *user.Model) (*user.Model, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *user.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.Model) (*user.Model, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.Model) *user.Model); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.Model) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *Repository) Update(ctx context.Context, _a1 *user.Model) (*user.Model, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *user.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.Model) (*user.Model, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.Model) *user.Model); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.Model) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
